import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { useNavigate, useLocation } from 'react-router-dom';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Alert,
  Stepper,
  Step,
  StepLabel,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip,
  Divider,
  Paper,
  CircularProgress,
  Grid,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions
} from '@mui/material';
import {
  CheckCircle,
  Download,
  Print,
  Email,
  Home,
  Info,
  Security,
  Schedule,
  PictureAsPdf,
  Error,
  Send,
  Calculate
} from '@mui/icons-material';
import { pdfFormService } from '../../services/AllocationVieChere/pdfFormService';

interface ConfirmationData {
  numeroReference: string;
  dateSubmission: Date;
  estimationMontant: number;
  delaiTraitement: string;
  formData: any;
}

const AllocationVieChereConfirmation: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const location = useLocation();
  
  const [confirmationData, setConfirmationData] = useState<ConfirmationData | null>(null);
  const [pdfGenerating, setPdfGenerating] = useState(false);
  const [pdfAnalyzing, setPdfAnalyzing] = useState(false);
  const [pdfFieldsAnalyzed, setPdfFieldsAnalyzed] = useState<string[]>([]);
  const [eligibilityResult, setEligibilityResult] = useState<any>(null);
  const [showEligibilityDialog, setShowEligibilityDialog] = useState(false);

  useEffect(() => {
    // R√©cup√©rer les donn√©es de confirmation depuis l'√©tat de navigation
    const data = location.state?.confirmationData;
    if (data) {
      setConfirmationData(data);
      // Analyser le formulaire PDF au chargement
      analyzePDFForm();
    } else {
      // Rediriger si pas de donn√©es
      navigate('/allocation-vie-chere');
    }
  }, [location.state, navigate]);

  /**
   * Analyse le formulaire PDF officiel pour d√©couvrir ses champs
   */
  const analyzePDFForm = async () => {
    setPdfAnalyzing(true);
    try {
      console.log('üîç Analyse du formulaire PDF officiel...');
      const fields = await pdfFormService.analyzeFormFields();
      setPdfFieldsAnalyzed(fields);
      console.log(`‚úÖ ${fields.length} champs d√©couverts dans le PDF`);
    } catch (error) {
      console.error('‚ùå Erreur analyse PDF:', error);
    } finally {
      setPdfAnalyzing(false);
    }
  };

  const generatePDF = async () => {
    setPdfGenerating(true);
    try {
      if (!confirmationData?.formData) {
        throw new Error('Donn√©es du formulaire manquantes');
      }

      console.log('üìÑ G√©n√©ration du formulaire PDF officiel pr√©-rempli...');
      
      // Convertir nos donn√©es au format PDF
      const pdfData = pdfFormService.convertFormDataToPDF(confirmationData.formData);
      console.log('üìã Donn√©es converties:', pdfData);
      
      // G√©n√©rer le PDF pr√©-rempli
      const pdfBytes = await pdfFormService.fillForm(pdfData);
      
      // Cr√©er le blob et t√©l√©charger
      const blob = new Blob([pdfBytes], { type: 'application/pdf' });
      const url = URL.createObjectURL(blob);
      
      const fileName = pdfFormService.generateFileName(pdfData);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = fileName;
      a.click();
      
      // Nettoyer l'URL
      URL.revokeObjectURL(url);
      
      console.log(`‚úÖ Formulaire PDF t√©l√©charg√©: ${fileName}`);
      
    } catch (error: any) {
      console.error('‚ùå Erreur g√©n√©ration PDF:', error);
      alert(`Erreur lors de la g√©n√©ration du PDF: ${error.message}`);
    } finally {
      setPdfGenerating(false);
    }
  };

  // Seuils d'√©ligibilit√© 2025 (exemple)
  const seuilsEligibilite = {
    1: 3500,  // 1 personne
    2: 5250,  // 2 personnes
    3: 6300,  // 3 personnes
    4: 7350,  // 4 personnes
    5: 8400,  // 5 personnes
    6: 9450,  // 6 personnes
    7: 10500, // 7 personnes
    8: 11550  // 8+ personnes
  };

  // Calcul d'√©ligibilit√©
  useEffect(() => {
    if (confirmationData?.formData?.etape2?.total_personnes_menage && confirmationData?.formData?.etape4?.total_revenus_menage !== undefined) {
      const nbPersonnes = Math.min(confirmationData.formData.etape2.total_personnes_menage, 8);
      const seuilApplicable = seuilsEligibilite[nbPersonnes as keyof typeof seuilsEligibilite];
      const revenus = confirmationData.formData.etape4.total_revenus_menage;
      
      const eligible = revenus <= seuilApplicable;
      const pourcentageSeuil = (revenus / seuilApplicable) * 100;
      
      let montantEstime = 0;
      if (eligible) {
        // Calcul simplifi√© du montant (exemple)
        const tauxAllocation = Math.max(0.1, 1 - (revenus / seuilApplicable));
        montantEstime = Math.round(tauxAllocation * 200 * nbPersonnes);
      }

      setEligibilityResult({
        eligible,
        revenus,
        seuil: seuilApplicable,
        pourcentageSeuil,
        montantEstime,
        nbPersonnes
      });
    }
  }, [confirmationData]);

  const getEligibilityColor = () => {
    if (!eligibilityResult) return 'info';
    return eligibilityResult.eligible ? 'success' : 'error';
  };

  const getEligibilityIcon = () => {
    if (!eligibilityResult) return <Info />;
    return eligibilityResult.eligible ? <CheckCircle /> : <Error />;
  };

  const etapesProcess = [
    { label: 'Soumission', status: 'completed' },
    { label: 'V√©rification', status: 'pending' },
    { label: 'Traitement', status: 'pending' },
    { label: 'D√©cision', status: 'pending' },
    { label: 'Paiement', status: 'pending' }
  ];

  if (!confirmationData) {
    return (
      <Box sx={{ maxWidth: 800, mx: 'auto', p: 3 }}>
        <Alert severity="error">
          Aucune donn√©e de confirmation trouv√©e. Veuillez refaire votre demande.
        </Alert>
        <Button 
          variant="contained" 
          onClick={() => navigate('/allocation-vie-chere')}
          sx={{ mt: 2 }}
        >
          Nouvelle demande
        </Button>
      </Box>
    );
  }

  return (
    <Box sx={{ maxWidth: 1000, mx: 'auto', p: 3 }}>
      {/* En-t√™te de confirmation */}
      <Card sx={{ mb: 3, bgcolor: 'success.main', color: 'white' }}>
        <CardContent>
          <Box display="flex" alignItems="center" gap={2}>
            <CheckCircle sx={{ fontSize: 48 }} />
            <Box>
              <Typography variant="h4" gutterBottom>
                üéâ Demande soumise avec succ√®s !
              </Typography>
              <Typography variant="h6">
                Votre allocation de vie ch√®re a √©t√© enregistr√©e
              </Typography>
              <Typography variant="body1" sx={{ mt: 1, opacity: 0.9 }}>
                R√©f√©rence : <strong>{confirmationData.numeroReference}</strong>
              </Typography>
            </Box>
          </Box>
        </CardContent>
      </Card>

      {/* Informations importantes */}
      <Alert severity="info" sx={{ mb: 3 }}>
        <Typography variant="h6" gutterBottom>
          üìã Prochaines √©tapes importantes
        </Typography>
        <Typography variant="body2">
          ‚Ä¢ Votre dossier sera trait√© dans un d√©lai de <strong>{confirmationData.delaiTraitement}</strong><br/>
          ‚Ä¢ Vous recevrez un accus√© de r√©ception par courrier postal<br/>
          ‚Ä¢ La d√©cision vous sera communiqu√©e par courrier recommand√©<br/>
          ‚Ä¢ Conservez pr√©cieusement votre num√©ro de r√©f√©rence
        </Typography>
      </Alert>

      {/* R√©sultat d'√©ligibilit√© */}
      {eligibilityResult && (
        <Card sx={{ mb: 3, bgcolor: `${getEligibilityColor()}.light` }}>
          <CardContent>
            <Box display="flex" alignItems="center" gap={2} sx={{ mb: 2 }}>
              {getEligibilityIcon()}
              <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                {eligibilityResult.eligible ? '‚úÖ Vous √™tes √©ligible !' : '‚ùå Non √©ligible'}
              </Typography>
            </Box>
            
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <Typography variant="body2">
                  <strong>Revenus du m√©nage :</strong> {eligibilityResult.revenus.toFixed(2)} ‚Ç¨/mois
                </Typography>
              </Grid>
              <Grid item xs={12} sm={6}>
                <Typography variant="body2">
                  <strong>Seuil applicable :</strong> {eligibilityResult.seuil.toFixed(2)} ‚Ç¨/mois
                </Typography>
              </Grid>
              <Grid item xs={12} sm={6}>
                <Typography variant="body2">
                  <strong>Taille du m√©nage :</strong> {eligibilityResult.nbPersonnes} personne(s)
                </Typography>
              </Grid>
              <Grid item xs={12} sm={6}>
                <Typography variant="body2">
                  <strong>Pourcentage du seuil :</strong> {eligibilityResult.pourcentageSeuil.toFixed(1)}%
                </Typography>
              </Grid>
            </Grid>

            {eligibilityResult.eligible && (
              <Alert severity="success" sx={{ mt: 2 }}>
                <Typography variant="subtitle1" sx={{ fontWeight: 'bold' }}>
                  üí∞ Montant estim√© : {eligibilityResult.montantEstime} ‚Ç¨
                </Typography>
                <Typography variant="body2">
                  Ce montant est une estimation. Le montant final sera d√©termin√© par l'administration.
                </Typography>
              </Alert>
            )}

            {!eligibilityResult.eligible && (
              <Alert severity="warning" sx={{ mt: 2 }}>
                <Typography variant="body2">
                  Vos revenus d√©passent le seuil d'√©ligibilit√© de {(eligibilityResult.pourcentageSeuil - 100).toFixed(1)}%.
                  Vous pouvez tout de m√™me soumettre votre demande qui sera examin√©e individuellement.
                </Typography>
              </Alert>
            )}

            <Button
              variant="outlined"
              onClick={() => setShowEligibilityDialog(true)}
              sx={{ mt: 2 }}
              startIcon={<Calculate />}
            >
              Voir le d√©tail du calcul
            </Button>
          </CardContent>
        </Card>
      )}

      {/* R√©capitulatif des donn√©es */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            üìã R√©capitulatif de votre demande
          </Typography>
          
          {/* √âtape 1 - Demandeur */}
          {confirmationData.formData?.etape1 && (
            <Box sx={{ mb: 2 }}>
              <Typography variant="subtitle1" color="primary" sx={{ fontWeight: 'bold' }}>
                üë§ Demandeur principal
              </Typography>
              <Typography variant="body2">
                {confirmationData.formData.etape1.prenom} {confirmationData.formData.etape1.nom}
              </Typography>
              <Typography variant="body2">
                Matricule : {confirmationData.formData.etape1.matricule_national}
              </Typography>
              <Typography variant="body2">
                N√©(e) le : {confirmationData.formData.etape1.date_naissance}
              </Typography>
            </Box>
          )}

          {/* √âtape 2 - M√©nage */}
          {confirmationData.formData?.etape2 && (
            <Box sx={{ mb: 2 }}>
              <Typography variant="subtitle1" color="primary" sx={{ fontWeight: 'bold' }}>
                üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Composition du m√©nage
              </Typography>
              <Typography variant="body2">
                Situation : {confirmationData.formData.etape2.situation_familiale}
              </Typography>
              <Typography variant="body2">
                Total : {confirmationData.formData.etape2.total_personnes_menage} personne(s)
              </Typography>
              {confirmationData.formData.etape2.nombre_enfants_0_17 > 0 && (
                <Typography variant="body2">
                  Enfants 0-17 ans : {confirmationData.formData.etape2.nombre_enfants_0_17}
                </Typography>
              )}
            </Box>
          )}

          {/* √âtape 3 - Logement */}
          {confirmationData.formData?.etape3 && (
            <Box sx={{ mb: 2 }}>
              <Typography variant="subtitle1" color="primary" sx={{ fontWeight: 'bold' }}>
                üè† Logement
              </Typography>
              <Typography variant="body2">
                Statut : {confirmationData.formData.etape3.statut_logement}
              </Typography>
              {confirmationData.formData.etape3.total_logement_mensuel > 0 && (
                <Typography variant="body2">
                  Co√ªt mensuel : {confirmationData.formData.etape3.total_logement_mensuel.toFixed(2)} ‚Ç¨
                </Typography>
              )}
            </Box>
          )}

          {/* √âtape 4 - Revenus */}
          {confirmationData.formData?.etape4 && (
            <Box sx={{ mb: 2 }}>
              <Typography variant="subtitle1" color="primary" sx={{ fontWeight: 'bold' }}>
                üí∞ Revenus
              </Typography>
              <Typography variant="body2">
                Total m√©nage : {confirmationData.formData.etape4.total_revenus_menage.toFixed(2)} ‚Ç¨/mois
              </Typography>
              <Typography variant="body2">
                Demandeur : {confirmationData.formData.etape4.total_revenus_demandeur.toFixed(2)} ‚Ç¨
              </Typography>
              {confirmationData.formData.etape4.conjoint_revenus && (
                <Typography variant="body2">
                  Conjoint : {confirmationData.formData.etape4.total_revenus_conjoint.toFixed(2)} ‚Ç¨
                </Typography>
              )}
            </Box>
          )}
        </CardContent>
      </Card>

      {/* Actions disponibles */}
      <Box display="flex" gap={3} sx={{ mb: 3 }}>
        {/* R√©sum√© de la demande */}
        <Box sx={{ flexGrow: 1 }}>
          <Card>
            <CardContent>
              <Typography variant="h5" gutterBottom color="primary">
                üìÑ R√©sum√© de votre demande
              </Typography>
              
              <List>
                <ListItem>
                  <ListItemIcon><Info /></ListItemIcon>
                  <ListItemText
                    primary="Num√©ro de r√©f√©rence"
                    secondary={confirmationData.numeroReference}
                  />
                </ListItem>
                
                <ListItem>
                  <ListItemIcon><Schedule /></ListItemIcon>
                  <ListItemText
                    primary="Date de soumission"
                    secondary={confirmationData.dateSubmission.toLocaleDateString('fr-LU')}
                  />
                </ListItem>
                
                <ListItem>
                  <ListItemIcon><Security /></ListItemIcon>
                  <ListItemText
                    primary="S√©curit√© RGPD"
                    secondary="Donn√©es trait√©es en conformit√© totale"
                  />
                  <Chip label="‚úì Conforme" color="success" size="small" />
                </ListItem>
              </List>

              <Divider sx={{ my: 2 }} />

              <Typography variant="h6" gutterBottom>
                üí∞ Estimation pr√©liminaire
              </Typography>
              <Typography variant="body2" color="text.secondary" paragraph>
                Bas√©e sur les informations fournies, votre allocation pourrait √™tre d'environ :
              </Typography>
              <Typography variant="h4" color="success.main" gutterBottom>
                {confirmationData.estimationMontant > 0 
                  ? `${confirmationData.estimationMontant}‚Ç¨/mois`
                  : 'En cours de calcul'}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                * Montant indicatif soumis √† validation finale
              </Typography>
            </CardContent>
          </Card>
        </Box>

        {/* Actions disponibles */}
        <Box sx={{ minWidth: 300 }}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom color="primary">
                üì• Actions disponibles
              </Typography>
              
              <Alert severity="success" sx={{ mb: 2 }}>
                <Typography variant="body2">
                  <strong>üìã Formulaire officiel pr√©-rempli pr√™t !</strong><br/>
                  T√©l√©chargez votre formulaire PDF avec toutes vos donn√©es d√©j√† saisies.
                </Typography>
              </Alert>

              {/* Analyse du PDF */}
              {pdfAnalyzing && (
                <Alert severity="info" sx={{ mb: 2 }}>
                  <Box display="flex" alignItems="center" gap={1}>
                    <CircularProgress size={16} />
                    <Typography variant="body2">
                      Analyse du formulaire PDF officiel en cours...
                    </Typography>
                  </Box>
                </Alert>
              )}

              {pdfFieldsAnalyzed.length > 0 && (
                <Alert severity="success" sx={{ mb: 2 }}>
                  <Typography variant="body2">
                    <strong>‚úÖ Formulaire PDF analys√© :</strong><br/>
                    {pdfFieldsAnalyzed.length} champs d√©tect√©s dans le formulaire officiel
                  </Typography>
                </Alert>
              )}
              
              <Box display="flex" flexDirection="column" gap={2}>
                <Button
                  variant="contained"
                  startIcon={pdfGenerating ? <CircularProgress size={20} color="inherit" /> : <PictureAsPdf />}
                  onClick={generatePDF}
                  disabled={pdfGenerating || pdfAnalyzing}
                  size="large"
                  sx={{ 
                    bgcolor: 'error.main',
                    '&:hover': { bgcolor: 'error.dark' },
                    py: 1.5
                  }}
                >
                  {pdfGenerating ? 'G√©n√©ration PDF...' : 'T√©l√©charger le formulaire PDF officiel'}
                </Button>
                
                <Typography variant="caption" color="text.secondary" sx={{ textAlign: 'center' }}>
                  üìÑ Format : PDF officiel pr√©-rempli ‚Ä¢ üîí Donn√©es s√©curis√©es RGPD
                </Typography>
                
                <Button
                  variant="outlined"
                  startIcon={<Print />}
                  onClick={() => window.print()}
                >
                  Imprimer cette page
                </Button>
                
                <Button
                  variant="outlined"
                  startIcon={<Email />}
                  onClick={() => window.location.href = 'mailto:allocation@fns.lu?subject=Demande%20allocation%20vie%20ch√®re%20' + confirmationData.numeroReference}
                >
                  Contacter le service
                </Button>
                
                <Divider sx={{ my: 1 }} />
                
                <Button
                  variant="text"
                  startIcon={<Home />}
                  onClick={() => navigate('/')}
                  color="primary"
                >
                  Retour √† l'accueil
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Box>
      </Box>

      {/* Processus de traitement */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom color="primary">
            üîÑ Suivi du processus de traitement
          </Typography>
          
          <Stepper activeStep={0} sx={{ mt: 2 }}>
            {etapesProcess.map((etape, index) => (
              <Step key={etape.label} completed={etape.status === 'completed'}>
                <StepLabel>
                  {etape.label}
                  {index === 0 && <Chip label="Actuel" color="success" size="small" sx={{ ml: 1 }} />}
                </StepLabel>
              </Step>
            ))}
          </Stepper>
          
          <Alert severity="info" sx={{ mt: 2 }}>
            <Typography variant="body2">
              Votre dossier est actuellement en phase de v√©rification. 
              Vous serez notifi√© par courrier de chaque √©tape importante.
            </Typography>
          </Alert>
        </CardContent>
      </Card>

      {/* Informations de contact */}
      <Paper sx={{ p: 3, bgcolor: 'grey.50' }}>
        <Typography variant="h6" gutterBottom>
          üìû Besoin d'aide ?
        </Typography>
        <Typography variant="body2" paragraph>
          <strong>Fonds national de solidarit√©</strong><br/>
          138, boulevard de la P√©trusse<br/>
          L-2330 Luxembourg<br/>
          <br/>
          T√©l : (+352) 24 78 61 81<br/>
          Email : allocation@fns.lu<br/>
          Heures d'ouverture : Lundi - Vendredi, 8h30 - 11h30 et 13h30 - 16h30
        </Typography>
        
        <Typography variant="caption" color="text.secondary">
          R√©f√©rence √† mentionner : {confirmationData.numeroReference}
        </Typography>
      </Paper>

      {/* Dialog d√©tail calcul */}
      <Dialog open={showEligibilityDialog} onClose={() => setShowEligibilityDialog(false)} maxWidth="md" fullWidth>
        <DialogTitle>
          <Calculate sx={{ mr: 1 }} />
          D√©tail du calcul d'√©ligibilit√©
        </DialogTitle>
        <DialogContent>
          {eligibilityResult && (
            <Box>
              <Typography variant="h6" gutterBottom>
                Seuils d'√©ligibilit√© 2025
              </Typography>
              
              <Typography variant="body2" paragraph>
                Les seuils d'√©ligibilit√© sont d√©termin√©s selon la taille du m√©nage :
              </Typography>
              
              <Box sx={{ mb: 3 }}>
                {Object.entries(seuilsEligibilite).map(([personnes, seuil]) => (
                  <Typography 
                    key={personnes} 
                    variant="body2"
                    sx={{ 
                      fontWeight: parseInt(personnes) === eligibilityResult.nbPersonnes ? 'bold' : 'normal',
                      color: parseInt(personnes) === eligibilityResult.nbPersonnes ? 'primary.main' : 'text.primary'
                    }}
                  >
                    {personnes} personne(s) : {seuil} ‚Ç¨/mois
                    {parseInt(personnes) === eligibilityResult.nbPersonnes && ' ‚Üê Votre situation'}
                  </Typography>
                ))}
              </Box>

              <Divider sx={{ my: 2 }} />

              <Typography variant="h6" gutterBottom>
                Votre calcul
              </Typography>
              
              <Typography variant="body2">
                ‚Ä¢ Revenus de votre m√©nage : <strong>{eligibilityResult.revenus.toFixed(2)} ‚Ç¨/mois</strong>
              </Typography>
              <Typography variant="body2">
                ‚Ä¢ Seuil pour {eligibilityResult.nbPersonnes} personne(s) : <strong>{eligibilityResult.seuil.toFixed(2)} ‚Ç¨/mois</strong>
              </Typography>
              <Typography variant="body2">
                ‚Ä¢ Pourcentage du seuil : <strong>{eligibilityResult.pourcentageSeuil.toFixed(1)}%</strong>
              </Typography>
              
              <Alert severity={eligibilityResult.eligible ? 'success' : 'warning'} sx={{ mt: 2 }}>
                <Typography variant="body2">
                  {eligibilityResult.eligible 
                    ? `‚úÖ Vous √™tes √©ligible car vos revenus sont inf√©rieurs au seuil de ${(100 - eligibilityResult.pourcentageSeuil).toFixed(1)}%.`
                    : `‚ùå Vous n'√™tes pas √©ligible car vos revenus d√©passent le seuil de ${(eligibilityResult.pourcentageSeuil - 100).toFixed(1)}%.`
                  }
                </Typography>
              </Alert>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowEligibilityDialog(false)}>
            Fermer
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default AllocationVieChereConfirmation; 