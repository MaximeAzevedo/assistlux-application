import { useState } from 'react';
import { CivilStatus as CivilStatusType } from '../../../types/user';
import Select from 'react-select';

interface CivilStatusProps {
  data: CivilStatusType;
  onChange: (data: CivilStatusType) => void;
}

const CivilStatus: React.FC<CivilStatusProps> = ({ data, onChange }) => {
  const handleChange = (field: keyof CivilStatusType, value: any) => {
    console.log(`Updating ${field}:`, value);
    onChange({
      ...data,
      [field]: value
    });
  };

  const maritalStatusOptions = [
    { value: 'single', label: 'üë§ C√©libataire' },
    { value: 'married', label: 'üíë Mari√©(e)' },
    { value: 'pacs', label: 'ü§ù Pacs√©(e)' },
    { value: 'divorced', label: 'üìÑ Divorc√©(e)' },
    { value: 'separated', label: '‚ÜîÔ∏è S√©par√©(e)' },
    { value: 'widowed', label: 'üíî Veuf/Veuve' }
  ];

  const childrenOptions = Array.from({ length: 11 }, (_, i) => ({
    value: i,
    label: i === 10 ? '10+ enfants' : `${i} enfant${i !== 1 ? 's' : ''}`
  }));

  const countryOptions = [
    // Europe
    { value: 'lu', label: 'üá±üá∫ Luxembourg', group: 'Europe' },
    { value: 'fr', label: 'üá´üá∑ France', group: 'Europe' },
    { value: 'de', label: 'üá©üá™ Allemagne', group: 'Europe' },
    { value: 'be', label: 'üáßüá™ Belgique', group: 'Europe' },
    { value: 'nl', label: 'üá≥üá± Pays-Bas', group: 'Europe' },
    { value: 'it', label: 'üáÆüáπ Italie', group: 'Europe' },
    { value: 'pt', label: 'üáµüáπ Portugal', group: 'Europe' },
    { value: 'es', label: 'üá™üá∏ Espagne', group: 'Europe' },
    { value: 'gb', label: 'üá¨üáß Royaume-Uni', group: 'Europe' },
    { value: 'ie', label: 'üáÆüá™ Irlande', group: 'Europe' },
    { value: 'ch', label: 'üá®üá≠ Suisse', group: 'Europe' },
    { value: 'at', label: 'üá¶üáπ Autriche', group: 'Europe' },
    { value: 'pl', label: 'üáµüá± Pologne', group: 'Europe' },
    { value: 'ro', label: 'üá∑üá¥ Roumanie', group: 'Europe' },
    { value: 'bg', label: 'üáßüá¨ Bulgarie', group: 'Europe' },
    { value: 'gr', label: 'üá¨üá∑ Gr√®ce', group: 'Europe' },
    
    // Afrique
    { value: 'ma', label: 'üá≤üá¶ Maroc', group: 'Afrique' },
    { value: 'dz', label: 'üá©üáø Alg√©rie', group: 'Afrique' },
    { value: 'tn', label: 'üáπüá≥ Tunisie', group: 'Afrique' },
    { value: 'sn', label: 'üá∏üá≥ S√©n√©gal', group: 'Afrique' },
    { value: 'ci', label: 'üá®üáÆ C√¥te d\'Ivoire', group: 'Afrique' },
    { value: 'cm', label: 'üá®üá≤ Cameroun', group: 'Afrique' },
    { value: 'cd', label: 'üá®üá© RD Congo', group: 'Afrique' },
    
    // Asie
    { value: 'cn', label: 'üá®üá≥ Chine', group: 'Asie' },
    { value: 'jp', label: 'üáØüáµ Japon', group: 'Asie' },
    { value: 'kr', label: 'üá∞üá∑ Cor√©e du Sud', group: 'Asie' },
    { value: 'in', label: 'üáÆüá≥ Inde', group: 'Asie' },
    { value: 'vn', label: 'üáªüá≥ Vietnam', group: 'Asie' },
    { value: 'th', label: 'üáπüá≠ Tha√Ølande', group: 'Asie' },
    
    // Moyen-Orient
    { value: 'sy', label: 'üá∏üáæ Syrie', group: 'Moyen-Orient' },
    { value: 'iq', label: 'üáÆüá∂ Irak', group: 'Moyen-Orient' },
    { value: 'ir', label: 'üáÆüá∑ Iran', group: 'Moyen-Orient' },
    { value: 'af', label: 'üá¶üá´ Afghanistan', group: 'Moyen-Orient' },
    
    // Am√©riques
    { value: 'us', label: 'üá∫üá∏ √âtats-Unis', group: 'Am√©riques' },
    { value: 'ca', label: 'üá®üá¶ Canada', group: 'Am√©riques' },
    { value: 'br', label: 'üáßüá∑ Br√©sil', group: 'Am√©riques' },
    { value: 'mx', label: 'üá≤üáΩ Mexique', group: 'Am√©riques' }
  ];

  const residenceStatusOptions = [
    { value: 'citizen', label: 'üá±üá∫ Citoyen luxembourgeois' },
    { value: 'eu_citizen', label: 'üá™üá∫ Citoyen europ√©en' },
    { value: 'permanent', label: 'üìù R√©sident permanent' },
    { value: 'temporary', label: '‚è≥ R√©sident temporaire' },
    { value: 'work_permit', label: 'üíº Permis de travail' },
    { value: 'student', label: 'üéì √âtudiant' },
    { value: 'asylum', label: 'üèõÔ∏è Demandeur d\'asile' },
    { value: 'protection', label: 'üõ°Ô∏è B√©n√©ficiaire de protection internationale' },
    { value: 'family', label: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Regroupement familial' }
  ];

  const groupedOptions = [
    {
      label: 'Europe',
      options: countryOptions.filter(country => country.group === 'Europe'),
    },
    {
      label: 'Afrique',
      options: countryOptions.filter(country => country.group === 'Afrique'),
    },
    {
      label: 'Asie',
      options: countryOptions.filter(country => country.group === 'Asie'),
    },
    {
      label: 'Moyen-Orient',
      options: countryOptions.filter(country => country.group === 'Moyen-Orient'),
    },
    {
      label: 'Am√©riques',
      options: countryOptions.filter(country => country.group === 'Am√©riques'),
    }
  ];

  const selectStyles = {
    menuPortal: (base: any) => ({
      ...base,
      zIndex: 9999
    }),
    control: (base: any) => ({
      ...base,
      minHeight: '42px',
    }),
    multiValue: (base: any) => ({
      ...base,
      backgroundColor: '#EDE9FE',
      borderRadius: '6px',
      padding: '2px',
    }),
    multiValueLabel: (base: any) => ({
      ...base,
      color: '#5B21B6',
      fontSize: '0.875rem',
    }),
    multiValueRemove: (base: any) => ({
      ...base,
      color: '#5B21B6',
      ':hover': {
        backgroundColor: '#DDD6FE',
        color: '#4C1D95',
      },
    }),
  };

  return (
    <div className="space-y-6">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          √âtat civil
        </label>
        <Select
          value={maritalStatusOptions.find(option => option.value === data.maritalStatus)}
          onChange={(option) => handleChange('maritalStatus', option?.value || null)}
          options={maritalStatusOptions}
          className="react-select-container"
          classNamePrefix="react-select"
          placeholder="S√©lectionner votre √©tat civil"
          isSearchable={false}
          isClearable
          menuPortalTarget={document.body}
          styles={selectStyles}
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Nombre d'enfants
        </label>
        <Select
          value={childrenOptions.find(option => option.value === data.numberOfChildren)}
          onChange={(option) => handleChange('numberOfChildren', option?.value ?? 0)}
          options={childrenOptions}
          className="react-select-container"
          classNamePrefix="react-select"
          placeholder="S√©lectionner le nombre d'enfants"
          isSearchable={false}
          isClearable
          menuPortalTarget={document.body}
          styles={selectStyles}
        />
      </div>

      {(data.maritalStatus === 'married' || data.maritalStatus === 'pacs') && (
        <div className="animate-fadeIn">
          <label htmlFor="spouseName" className="block text-sm font-medium text-gray-700 mb-2">
            Nom du conjoint
          </label>
          <input
            type="text"
            id="spouseName"
            value={data.spouseName}
            onChange={(e) => handleChange('spouseName', e.target.value)}
            className="block w-full px-4 py-3 rounded-lg border border-gray-300 shadow-sm focus:ring-purple-500 focus:border-purple-500 transition-colors"
            placeholder="Nom et pr√©nom du conjoint"
          />
        </div>
      )}

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Nationalit√©
        </label>
        <Select
          value={countryOptions.find(option => option.value === data.countryOfOrigin)}
          onChange={(option) => handleChange('countryOfOrigin', option?.value || null)}
          options={groupedOptions}
          className="react-select-container"
          classNamePrefix="react-select"
          placeholder="S√©lectionner votre nationalit√©"
          isSearchable
          isClearable
          menuPortalTarget={document.body}
          styles={selectStyles}
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Statut de r√©sidence
        </label>
        <Select
          value={residenceStatusOptions.find(status => status.value === data.residenceStatus)}
          onChange={(option) => handleChange('residenceStatus', option?.value || '')}
          options={residenceStatusOptions}
          className="react-select-container"
          classNamePrefix="react-select"
          placeholder="S√©lectionner votre statut de r√©sidence"
          isSearchable
          isClearable
          menuPortalTarget={document.body}
          styles={selectStyles}
        />
      </div>
    </div>
  );
};

export default CivilStatus;